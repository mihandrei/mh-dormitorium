package mh.pdist.auction.net.client;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.text.DefaultCaret;

import org.apache.log4j.AppenderSkeleton;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.apache.log4j.spi.LoggingEvent;

/**
 *
 * @author miha
 */
public class ClientUI extends javax.swing.JFrame {

    /** Creates new form ClientFrame */
    public ClientUI() {
        initComponents();
        DefaultCaret caret = (DefaultCaret)jTextArea1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	   submitbetBtn = new javax.swing.JButton();
           ammountTextField = new javax.swing.JTextField();
           infolabel = new javax.swing.JLabel();
           jScrollPane1 = new javax.swing.JScrollPane();
           jTextArea1 = new javax.swing.JTextArea();

           setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

           submitbetBtn.setText("login");
           submitbetBtn.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                   submitbetBtnActionPerformed(evt);
               }
           });

           infolabel.setBackground(new java.awt.Color(220, 220, 220));
           infolabel.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
           infolabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
           infolabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
           infolabel.setOpaque(true);
           infolabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

           jTextArea1.setBackground(new java.awt.Color(254, 254, 254));
           jTextArea1.setColumns(20);
           jTextArea1.setEditable(false);
           jTextArea1.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
           jTextArea1.setRows(5);
           jScrollPane1.setViewportView(jTextArea1);

           javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
           getContentPane().setLayout(layout);
           layout.setHorizontalGroup(
               layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                   .addContainerGap()
                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                       .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                       .addComponent(infolabel, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                       .addGroup(layout.createSequentialGroup()
                           .addComponent(ammountTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 858, Short.MAX_VALUE)
                           .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                           .addComponent(submitbetBtn)))
                   .addContainerGap())
           );
           layout.setVerticalGroup(
               layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                   .addContainerGap()
                   .addComponent(infolabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                   .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                       .addComponent(submitbetBtn)
                       .addComponent(ammountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                   .addContainerGap())
           );

           pack();
    }// </editor-fold>

    private void submitbetBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	String str = ammountTextField.getText().trim();
    	if(!str.equals("")){
	    	if(clientproto.needs_login()){
	    		clientproto.login(str);
	    	}else{
	    		long ammount = Long.parseLong(str);
	    		clientproto.placeBet(ammount);
	    	}
    	}
    	ammountTextField.setText("");
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
    	final ClientUI mainframe = new ClientUI();
    	TextAppender appender = mainframe.new TextAppender();
    	appender.setThreshold(Level.INFO);
    	
    	Logger.getRootLogger().addAppender(appender);
    	
        try {
			java.awt.EventQueue.invokeAndWait(new Runnable() {
			    public void run() {
			        mainframe.setVisible(true);
			    }
			});
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
        //above operation is synchron. UI is up so the logging msgs from now on will be reflected in the gui
        mainframe.startNetClient();
    }
    
    private AuctionClientProtocol clientproto ;
    private void startNetClient(){
    	Logger log = Logger.getLogger("mh.client");
    	String host = "localhost";
    	int port = 4444;
    	log.info("connecting to " + host + ":"+port);
        
    	Socket sock;
		try {
			sock = new Socket(host,port);
			clientproto = new AuctionClientProtocol(sock);
			new Thread(clientproto,"auct-cli").start();
		} catch (UnknownHostException e) {			
			log.fatal("connection failed",e);
		} catch (IOException e) {
			log.fatal("connection failed",e);
		}           
    }

    // Variables declaration - do not modify
    private javax.swing.JTextField ammountTextField;
    private javax.swing.JLabel infolabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton submitbetBtn;
    // End of variables declaration
    
    private List<String> logbuffer = new ArrayList<String>(100);
    
    private void doLog(String logOutput) {
    	logbuffer.add(logOutput);
    	jTextArea1.append(logOutput);
    }

    private class TextAppender extends AppenderSkeleton{    	
    	public TextAppender(){
    		layout = new PatternLayout("%d{ABSOLUTE} %-5.5p [%12.12t] %-40.40c{5}: %m%n");
    	}
    	@Override
    	protected void append(LoggingEvent event) {
    		String logOutput = layout.format(event);
    		doLog(logOutput);				
    	}
    	
    	@Override
    	public void close() {
    	}
    	
    	@Override
    	public boolean requiresLayout() {
    		return true;
    	}
    	
    }
}
